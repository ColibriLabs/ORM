<?php
/**
 * Generated By ColibriORM Generator
 * @author Ivan Gontarenko
*/

namespace ProCard\Models\Base;

use Colibri\Core\Repository;
use Colibri\Query\Statement\Comparison\Cmp;
use Colibri\Query\Statement\OrderBy;
use ProCard\Models\ProductRepository;
use ProCard\Models\Product;
use Colibri\Core\ResultSet\ResultSetIterator;

/**
 * Magic methods for query-builder and access to the fields data
 *
 * @method Product findOneById($id);
 * @method ResultSetIterator findById($id);
 * @method ProductRepository filterById($id, $cmp = Cmp::EQ);
 * @method ProductRepository orderById($vector = OrderBy::ASC);
 * @method ProductRepository groupById();
 * @method Product findOneByCategoryId($category_id);
 * @method ResultSetIterator findByCategoryId($category_id);
 * @method ProductRepository filterByCategoryId($category_id, $cmp = Cmp::EQ);
 * @method ProductRepository orderByCategoryId($vector = OrderBy::ASC);
 * @method ProductRepository groupByCategoryId();
 * @method Product findOneByManufacturerId($manufacturer_id);
 * @method ResultSetIterator findByManufacturerId($manufacturer_id);
 * @method ProductRepository filterByManufacturerId($manufacturer_id, $cmp = Cmp::EQ);
 * @method ProductRepository orderByManufacturerId($vector = OrderBy::ASC);
 * @method ProductRepository groupByManufacturerId();
 * @method Product findOneByPictureId($picture_id);
 * @method ResultSetIterator findByPictureId($picture_id);
 * @method ProductRepository filterByPictureId($picture_id, $cmp = Cmp::EQ);
 * @method ProductRepository orderByPictureId($vector = OrderBy::ASC);
 * @method ProductRepository groupByPictureId();
 * @method Product findOneBySlug($slug);
 * @method ResultSetIterator findBySlug($slug);
 * @method ProductRepository filterBySlug($slug, $cmp = Cmp::EQ);
 * @method ProductRepository orderBySlug($vector = OrderBy::ASC);
 * @method ProductRepository groupBySlug();
 * @method Product findOneByCode($vendor_code);
 * @method ResultSetIterator findByCode($vendor_code);
 * @method ProductRepository filterByCode($vendor_code, $cmp = Cmp::EQ);
 * @method ProductRepository orderByCode($vector = OrderBy::ASC);
 * @method ProductRepository groupByCode();
 * @method Product findOneByName($name);
 * @method ResultSetIterator findByName($name);
 * @method ProductRepository filterByName($name, $cmp = Cmp::EQ);
 * @method ProductRepository orderByName($vector = OrderBy::ASC);
 * @method ProductRepository groupByName();
 * @method Product findOneByPrice($price);
 * @method ResultSetIterator findByPrice($price);
 * @method ProductRepository filterByPrice($price, $cmp = Cmp::EQ);
 * @method ProductRepository orderByPrice($vector = OrderBy::ASC);
 * @method ProductRepository groupByPrice();
 * @method Product findOneByHasInStock($product_in_stock);
 * @method ResultSetIterator findByHasInStock($product_in_stock);
 * @method ProductRepository filterByHasInStock($product_in_stock, $cmp = Cmp::EQ);
 * @method ProductRepository orderByHasInStock($vector = OrderBy::ASC);
 * @method ProductRepository groupByHasInStock();
 * @method Product findOneByQuantity($quantity);
 * @method ResultSetIterator findByQuantity($quantity);
 * @method ProductRepository filterByQuantity($quantity, $cmp = Cmp::EQ);
 * @method ProductRepository orderByQuantity($vector = OrderBy::ASC);
 * @method ProductRepository groupByQuantity();
 * @method Product findOneByStatus($status);
 * @method ResultSetIterator findByStatus($status);
 * @method ProductRepository filterByStatus($status, $cmp = Cmp::EQ);
 * @method ProductRepository orderByStatus($vector = OrderBy::ASC);
 * @method ProductRepository groupByStatus();
 * @method Product findOneByVersion($version);
 * @method ResultSetIterator findByVersion($version);
 * @method ProductRepository filterByVersion($version, $cmp = Cmp::EQ);
 * @method ProductRepository orderByVersion($vector = OrderBy::ASC);
 * @method ProductRepository groupByVersion();
 * @method Product findOneByModified($created);
 * @method ResultSetIterator findByModified($created);
 * @method ProductRepository filterByModified($created, $cmp = Cmp::EQ);
 * @method ProductRepository orderByModified($vector = OrderBy::ASC);
 * @method ProductRepository groupByModified();
*/

class BaseProductRepository extends Repository
{
  
  /**
   * BaseProductRepository constructor.
   */
  public function __construct()
  {
    parent::__construct(Product::class);
  }
  
  /**
   * @param integer $id Identifier
   * @return Product Entity instance
   */
  public static function findByPK($id)
  {
    /** @var Product $entity */
    $repository = new ProductRepository();
    $entity = $repository->retrieve($id);
    
    return $entity;
  }

}
