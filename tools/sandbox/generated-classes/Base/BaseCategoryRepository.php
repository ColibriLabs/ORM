<?php
/**
 * Generated By ColibriORM Generator
 * @author Ivan Gontarenko
*/

namespace ProCard\Models\Base;

use Colibri\Core\Repository;
use Colibri\Query\Statement\Comparison\Cmp;
use Colibri\Query\Statement\OrderBy;
use ProCard\Models\CategoryRepository;
use ProCard\Models\Category;
use Colibri\Core\ResultSet\ResultSetIterator;

/**
 * Magic methods for query-builder and access to the fields data
 *
 * @method Category findOneById($id);
 * @method ResultSetIterator findById($id);
 * @method CategoryRepository filterById($id, $cmp = Cmp::EQ);
 * @method CategoryRepository orderById($vector = OrderBy::ASC);
 * @method CategoryRepository groupById();
 * @method Category findOneByParentId($parent_id);
 * @method ResultSetIterator findByParentId($parent_id);
 * @method CategoryRepository filterByParentId($parent_id, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByParentId($vector = OrderBy::ASC);
 * @method CategoryRepository groupByParentId();
 * @method Category findOneByLeftKey($left_key);
 * @method ResultSetIterator findByLeftKey($left_key);
 * @method CategoryRepository filterByLeftKey($left_key, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByLeftKey($vector = OrderBy::ASC);
 * @method CategoryRepository groupByLeftKey();
 * @method Category findOneByRightKey($right_key);
 * @method ResultSetIterator findByRightKey($right_key);
 * @method CategoryRepository filterByRightKey($right_key, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByRightKey($vector = OrderBy::ASC);
 * @method CategoryRepository groupByRightKey();
 * @method Category findOneByDepth($depth);
 * @method ResultSetIterator findByDepth($depth);
 * @method CategoryRepository filterByDepth($depth, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByDepth($vector = OrderBy::ASC);
 * @method CategoryRepository groupByDepth();
 * @method Category findOneByName($name);
 * @method ResultSetIterator findByName($name);
 * @method CategoryRepository filterByName($name, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByName($vector = OrderBy::ASC);
 * @method CategoryRepository groupByName();
 * @method Category findOneByLabel($label);
 * @method ResultSetIterator findByLabel($label);
 * @method CategoryRepository filterByLabel($label, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByLabel($vector = OrderBy::ASC);
 * @method CategoryRepository groupByLabel();
 * @method Category findOneByDescription($short_description);
 * @method ResultSetIterator findByDescription($short_description);
 * @method CategoryRepository filterByDescription($short_description, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByDescription($vector = OrderBy::ASC);
 * @method CategoryRepository groupByDescription();
 * @method Category findOneByCreated($created);
 * @method ResultSetIterator findByCreated($created);
 * @method CategoryRepository filterByCreated($created, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByCreated($vector = OrderBy::ASC);
 * @method CategoryRepository groupByCreated();
 * @method Category findOneByModified($modified);
 * @method ResultSetIterator findByModified($modified);
 * @method CategoryRepository filterByModified($modified, $cmp = Cmp::EQ);
 * @method CategoryRepository orderByModified($vector = OrderBy::ASC);
 * @method CategoryRepository groupByModified();
*/

class BaseCategoryRepository extends Repository
{
  
  /**
   * BaseCategoryRepository constructor.
   */
  public function __construct()
  {
    parent::__construct(Category::class);
  }
  
  /**
   * @param integer $id Identifier
   * @return Category Entity instance
   */
  public static function findByPK($id)
  {
    /** @var Category $entity */
    $repository = new CategoryRepository();
    $entity = $repository->retrieve($id);
    
    return $entity;
  }

}
